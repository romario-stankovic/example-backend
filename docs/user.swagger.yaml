# yaml-language-server: $schema=https://spec.openapis.org/oas/3.1/schema/2022-10-07
openapi: "3.1.0"
info:
  title: "Example API"
  version: "1.0.0"

components:
  schemas:
    Error:
      type: "object"
      properties:
        message:
          type: "string"
        status:
          type: "integer"
    User:
      type: "object"
      properties:
        id:
          type: "integer"
        username:
          type: "string"
    CreateUserBody:
      type: "object"
      properties:
        username:
          type: "string"
        password:
          type: "string"
    UpdateUserBody:
      type: "object"
      properties:
        username:
          type: "string"
        password:
          type: "string"

paths:
  /api/user:
    get:
      summary: "Returns a list of users."
      parameters:
        - name: "filter"
          in: "query"
          required: false
          schema:
            type: "string"
        - name: "page"
          in: "query"
          required: false
          schema:
            type: "integer"
        - name: "limit"
          in: "query"
          required: false
          schema:
            type: "integer"
      responses:
        200:
          description: "A list of users."
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/User"
    post:
      summary: "Creates a new user."
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateUserBody"
      responses:
        200:
          description: "User created."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        400:
          description: "Invalid body"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /api/user/{id}:
    get:
      summary: "Returns a user by ID."
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "integer"
      responses:
        200:
          description: "A user."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        400:
          description: "Bad Request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        404:
          description: "Not Found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    put:
      summary: "Updates a user by ID."
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "integer"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateUserBody"
      responses:
        200:
          description: "User updated."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        400:
          description: "Bad Request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

    delete:
      summary: "Deletes a user by ID."
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "integer"
      responses:
        200:
          description: "User deleted."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        400:
          description: "Bad Request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"